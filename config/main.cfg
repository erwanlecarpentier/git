/**
 * @brief Save parameters
 * @param {std::string} ac_save_path; path to the state log file
 * @param {std::string} fz_save_path; path to the envrt log file
 */
st_log_path = "data/state.dat";
fz_log_path = "data/wind.dat";

/**
 * @brief Time parameters
 * @param {double} limit_time; limit time at which the simulation stops (s)
 * @param {double} time_step_width; time step width i.e. command period (s)
 * @param {double} nb_sub_time_step; the number of sub_time_steps between two command input
 */
limit_time = 1000.;
time_step_width = .1;
nb_sub_time_step = 1.; // note: type is 'double', do not forget the point

/**
 * @brief Environment parameters
 * @param {unsigned int} envt_selector; selector for the type of environment
 * - case 0: flat_zone
 *   @param {double} wx, wy; wind vector horizontal components (m/s)
 * - case 1: flat_thermal_soaring_zone
 *   @param {string} envt_path;
 */
envt_selector = 1;
wx = 0.;
wy = 0.;
noise_stddev = 0.;
th_scenario_path = "config/fz_scenario.csv";
envt_cfg_path = "config/fz_config.csv";

/**
 * @brief Aicraft parameters
 * @param {unsigned int} aircraft_selector; selector for the type of aircraft
 *   -  case 0: beeler_glider
 * @param {double} x0, y0, z0; initial position (m)
 * @param {double} V0; initial velocity magnitude (m/s)
 * @param {double} gamma0; initial elevation angle (deg)
 * @param {double} khi0; initial azimuth angle (deg)
 * @param {double} alpha0; initial 'angle of attack' (wrt velocity vector) (deg)
 * @param {double} beta0; initial 'sideslip angle' (wrt velocity vector) (deg)
 * @param {double} sigma0; initial bank angle (deg)
 * @param {double} maximum_angle_magnitude; (deg)
 */
aircraft_selector = 0;
x0 = 0.;
y0 = 0.;
z0 = 500.;
V0 = 14.;
gamma0 = -1.5;
khi0 = 90.;
alpha0 = 0.;
beta0 = 0.;
sigma0 = 0.;
maximum_angle_magnitude = 40.;

/**
 * @brief Stepper selection
 * @param {unsigned int} stepper_selector; selector for the type of stepper
 * - case 0: euler_integrator
 * - case 1: rk4_integrator
 */
stepper_selector = 0;

/**
 * @brief Pilot selector
 * @param {double} angle_rate_magnitude; rate at which the pilot can modify the angles (deg)
 * @param {unsigned int} pilot_selector; selector for the type of pilot
 * - case 0: passive_pilot;
 * - case 1: heuristic_pilot;
 * - case 2: q_learning_pilot;
 * - case 3: uct_pilot;
 * - case 4: optimistic_pilot;
 */
angle_rate_magnitude = 3.; // (deg) =time_step_width*maximum_angle_magnitude(deg)/DT
kdalpha = .01; // coefficient for the D controller in alpha
pilot_selector = 3;

q_epsilon = .01;
q_learning_rate = .001;
q_discount_factor = .99;

uct_parameter = .70710678118; // 1./sqrt(2.)
uct_time_step_width = .2;
uct_sub_time_step_width = .1;
uct_discount_factor = .9;
uct_horizon = 100;
uct_budget = 1000;
uct_default_policy_selector = 0; // 0:random; 1:heuristic

opt_time_step_width = 1.;
opt_sub_time_step_width = .1;
opt_discount_factor = .9;
opt_budget = 10000; //2187(=3^7) and 6561(=3^8)

